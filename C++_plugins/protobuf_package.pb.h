#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wpadded"
#pragma clang diagnostic ignored "-Wshorten-64-to-32"
#pragma clang diagnostic ignored "-Wglobal-constructors"
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wreserved-id-macro"
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf_package.proto

#ifndef PROTOBUF_protobuf_5fpackage_2eproto__INCLUDED
#define PROTOBUF_protobuf_5fpackage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_package {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_5fpackage_2eproto();
void protobuf_AssignDesc_protobuf_5fpackage_2eproto();
void protobuf_ShutdownFile_protobuf_5fpackage_2eproto();

class ProtobufInfo;
class ProtobufDirectory;

// ===================================================================

class ProtobufInfo : public ::google::protobuf::Message {
 public:
  ProtobufInfo();
  virtual ~ProtobufInfo();

  ProtobufInfo(const ProtobufInfo& from);

  inline ProtobufInfo& operator=(const ProtobufInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtobufInfo& default_instance();

  void Swap(ProtobufInfo* other);

  // implements Message ----------------------------------------------

  ProtobufInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtobufInfo& from);
  void MergeFrom(const ProtobufInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 image_fullseg_coords_y = 1 [packed = true];
  inline int image_fullseg_coords_y_size() const;
  inline void clear_image_fullseg_coords_y();
  static const int kImageFullsegCoordsYFieldNumber = 1;
  inline ::google::protobuf::int32 image_fullseg_coords_y(int index) const;
  inline void set_image_fullseg_coords_y(int index, ::google::protobuf::int32 value);
  inline void add_image_fullseg_coords_y(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_fullseg_coords_y() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_fullseg_coords_y();

  // repeated int32 image_fullseg_coords_x = 2 [packed = true];
  inline int image_fullseg_coords_x_size() const;
  inline void clear_image_fullseg_coords_x();
  static const int kImageFullsegCoordsXFieldNumber = 2;
  inline ::google::protobuf::int32 image_fullseg_coords_x(int index) const;
  inline void set_image_fullseg_coords_x(int index, ::google::protobuf::int32 value);
  inline void add_image_fullseg_coords_x(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_fullseg_coords_x() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_fullseg_coords_x();

  // repeated int32 image_fullseg_coords_z = 3 [packed = true];
  inline int image_fullseg_coords_z_size() const;
  inline void clear_image_fullseg_coords_z();
  static const int kImageFullsegCoordsZFieldNumber = 3;
  inline ::google::protobuf::int32 image_fullseg_coords_z(int index) const;
  inline void set_image_fullseg_coords_z(int index, ::google::protobuf::int32 value);
  inline void add_image_fullseg_coords_z(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_fullseg_coords_z() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_fullseg_coords_z();

  // repeated int32 image_perimseg_coords_y = 4 [packed = true];
  inline int image_perimseg_coords_y_size() const;
  inline void clear_image_perimseg_coords_y();
  static const int kImagePerimsegCoordsYFieldNumber = 4;
  inline ::google::protobuf::int32 image_perimseg_coords_y(int index) const;
  inline void set_image_perimseg_coords_y(int index, ::google::protobuf::int32 value);
  inline void add_image_perimseg_coords_y(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_perimseg_coords_y() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_perimseg_coords_y();

  // repeated int32 image_perimseg_coords_x = 5 [packed = true];
  inline int image_perimseg_coords_x_size() const;
  inline void clear_image_perimseg_coords_x();
  static const int kImagePerimsegCoordsXFieldNumber = 5;
  inline ::google::protobuf::int32 image_perimseg_coords_x(int index) const;
  inline void set_image_perimseg_coords_x(int index, ::google::protobuf::int32 value);
  inline void add_image_perimseg_coords_x(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_perimseg_coords_x() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_perimseg_coords_x();

  // repeated int32 image_perimseg_coords_z = 6 [packed = true];
  inline int image_perimseg_coords_z_size() const;
  inline void clear_image_perimseg_coords_z();
  static const int kImagePerimsegCoordsZFieldNumber = 6;
  inline ::google::protobuf::int32 image_perimseg_coords_z(int index) const;
  inline void set_image_perimseg_coords_z(int index, ::google::protobuf::int32 value);
  inline void add_image_perimseg_coords_z(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_perimseg_coords_z() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_perimseg_coords_z();

  // repeated int32 image_userseg_coords_y = 7 [packed = true];
  inline int image_userseg_coords_y_size() const;
  inline void clear_image_userseg_coords_y();
  static const int kImageUsersegCoordsYFieldNumber = 7;
  inline ::google::protobuf::int32 image_userseg_coords_y(int index) const;
  inline void set_image_userseg_coords_y(int index, ::google::protobuf::int32 value);
  inline void add_image_userseg_coords_y(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_userseg_coords_y() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_userseg_coords_y();

  // repeated int32 image_userseg_coords_x = 8 [packed = true];
  inline int image_userseg_coords_x_size() const;
  inline void clear_image_userseg_coords_x();
  static const int kImageUsersegCoordsXFieldNumber = 8;
  inline ::google::protobuf::int32 image_userseg_coords_x(int index) const;
  inline void set_image_userseg_coords_x(int index, ::google::protobuf::int32 value);
  inline void add_image_userseg_coords_x(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_userseg_coords_x() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_userseg_coords_x();

  // repeated int32 image_userseg_coords_z = 9 [packed = true];
  inline int image_userseg_coords_z_size() const;
  inline void clear_image_userseg_coords_z();
  static const int kImageUsersegCoordsZFieldNumber = 9;
  inline ::google::protobuf::int32 image_userseg_coords_z(int index) const;
  inline void set_image_userseg_coords_z(int index, ::google::protobuf::int32 value);
  inline void add_image_userseg_coords_z(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      image_userseg_coords_z() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_image_userseg_coords_z();

  // repeated float quantifiedProperties = 10;
  inline int quantifiedproperties_size() const;
  inline void clear_quantifiedproperties();
  static const int kQuantifiedPropertiesFieldNumber = 10;
  inline float quantifiedproperties(int index) const;
  inline void set_quantifiedproperties(int index, float value);
  inline void add_quantifiedproperties(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      quantifiedproperties() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_quantifiedproperties();

  // repeated float userCellValue = 11;
  inline int usercellvalue_size() const;
  inline void clear_usercellvalue();
  static const int kUserCellValueFieldNumber = 11;
  inline float usercellvalue(int index) const;
  inline void set_usercellvalue(int index, float value);
  inline void add_usercellvalue(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      usercellvalue() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_usercellvalue();

  // repeated string userCellFormula = 12;
  inline int usercellformula_size() const;
  inline void clear_usercellformula();
  static const int kUserCellFormulaFieldNumber = 12;
  inline const ::std::string& usercellformula(int index) const;
  inline ::std::string* mutable_usercellformula(int index);
  inline void set_usercellformula(int index, const ::std::string& value);
  inline void set_usercellformula(int index, const char* value);
  inline void set_usercellformula(int index, const char* value, size_t size);
  inline ::std::string* add_usercellformula();
  inline void add_usercellformula(const ::std::string& value);
  inline void add_usercellformula(const char* value);
  inline void add_usercellformula(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& usercellformula() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_usercellformula();

  // optional float idx = 13;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 13;
  inline float idx() const;
  inline void set_idx(float value);

  // optional float seed_y = 14;
  inline bool has_seed_y() const;
  inline void clear_seed_y();
  static const int kSeedYFieldNumber = 14;
  inline float seed_y() const;
  inline void set_seed_y(float value);

  // optional float seed_x = 15;
  inline bool has_seed_x() const;
  inline void clear_seed_x();
  static const int kSeedXFieldNumber = 15;
  inline float seed_x() const;
  inline void set_seed_x(float value);

  // optional float seed_z = 16;
  inline bool has_seed_z() const;
  inline void clear_seed_z();
  static const int kSeedZFieldNumber = 16;
  inline float seed_z() const;
  inline void set_seed_z(float value);

  // optional float seed_manual = 17;
  inline bool has_seed_manual() const;
  inline void clear_seed_manual();
  static const int kSeedManualFieldNumber = 17;
  inline float seed_manual() const;
  inline void set_seed_manual(float value);

  // optional float contour_AddRemoveMerge = 18;
  inline bool has_contour_addremovemerge() const;
  inline void clear_contour_addremovemerge();
  static const int kContourAddRemoveMergeFieldNumber = 18;
  inline float contour_addremovemerge() const;
  inline void set_contour_addremovemerge(float value);

  // optional float contour_MergeGroup = 19;
  inline bool has_contour_mergegroup() const;
  inline void clear_contour_mergegroup();
  static const int kContourMergeGroupFieldNumber = 19;
  inline float contour_mergegroup() const;
  inline void set_contour_mergegroup(float value);

  // optional float contour_WindowSize = 20;
  inline bool has_contour_windowsize() const;
  inline void clear_contour_windowsize();
  static const int kContourWindowSizeFieldNumber = 20;
  inline float contour_windowsize() const;
  inline void set_contour_windowsize(float value);

  // optional float contour_Tmax = 21;
  inline bool has_contour_tmax() const;
  inline void clear_contour_tmax();
  static const int kContourTmaxFieldNumber = 21;
  inline float contour_tmax() const;
  inline void set_contour_tmax(float value);

  // optional float contour_segmethod = 22;
  inline bool has_contour_segmethod() const;
  inline void clear_contour_segmethod();
  static const int kContourSegmethodFieldNumber = 22;
  inline float contour_segmethod() const;
  inline void set_contour_segmethod(float value);

  // optional float hand_validated = 23 [default = 1];
  inline bool has_hand_validated() const;
  inline void clear_hand_validated();
  static const int kHandValidatedFieldNumber = 23;
  inline float hand_validated() const;
  inline void set_hand_validated(float value);

  // optional float seed_hsz = 24;
  inline bool has_seed_hsz() const;
  inline void clear_seed_hsz();
  static const int kSeedHszFieldNumber = 24;
  inline float seed_hsz() const;
  inline void set_seed_hsz(float value);

  // optional float seed_t1 = 25;
  inline bool has_seed_t1() const;
  inline void clear_seed_t1();
  static const int kSeedT1FieldNumber = 25;
  inline float seed_t1() const;
  inline void set_seed_t1(float value);

  // optional float seed_t2 = 26;
  inline bool has_seed_t2() const;
  inline void clear_seed_t2();
  static const int kSeedT2FieldNumber = 26;
  inline float seed_t2() const;
  inline void set_seed_t2(float value);

  // optional float seed_segmethod = 27;
  inline bool has_seed_segmethod() const;
  inline void clear_seed_segmethod();
  static const int kSeedSegmethodFieldNumber = 27;
  inline float seed_segmethod() const;
  inline void set_seed_segmethod(float value);

  // @@protoc_insertion_point(class_scope:protobuf_package.ProtobufInfo)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_seed_y();
  inline void clear_has_seed_y();
  inline void set_has_seed_x();
  inline void clear_has_seed_x();
  inline void set_has_seed_z();
  inline void clear_has_seed_z();
  inline void set_has_seed_manual();
  inline void clear_has_seed_manual();
  inline void set_has_contour_addremovemerge();
  inline void clear_has_contour_addremovemerge();
  inline void set_has_contour_mergegroup();
  inline void clear_has_contour_mergegroup();
  inline void set_has_contour_windowsize();
  inline void clear_has_contour_windowsize();
  inline void set_has_contour_tmax();
  inline void clear_has_contour_tmax();
  inline void set_has_contour_segmethod();
  inline void clear_has_contour_segmethod();
  inline void set_has_hand_validated();
  inline void clear_has_hand_validated();
  inline void set_has_seed_hsz();
  inline void clear_has_seed_hsz();
  inline void set_has_seed_t1();
  inline void clear_has_seed_t1();
  inline void set_has_seed_t2();
  inline void clear_has_seed_t2();
  inline void set_has_seed_segmethod();
  inline void clear_has_seed_segmethod();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_fullseg_coords_y_;
  mutable int _image_fullseg_coords_y_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_fullseg_coords_x_;
  mutable int _image_fullseg_coords_x_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_fullseg_coords_z_;
  mutable int _image_fullseg_coords_z_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_perimseg_coords_y_;
  mutable int _image_perimseg_coords_y_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_perimseg_coords_x_;
  mutable int _image_perimseg_coords_x_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_perimseg_coords_z_;
  mutable int _image_perimseg_coords_z_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_userseg_coords_y_;
  mutable int _image_userseg_coords_y_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_userseg_coords_x_;
  mutable int _image_userseg_coords_x_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > image_userseg_coords_z_;
  mutable int _image_userseg_coords_z_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > quantifiedproperties_;
  ::google::protobuf::RepeatedField< float > usercellvalue_;
  ::google::protobuf::RepeatedPtrField< ::std::string> usercellformula_;
  float idx_;
  float seed_y_;
  float seed_x_;
  float seed_z_;
  float seed_manual_;
  float contour_addremovemerge_;
  float contour_mergegroup_;
  float contour_windowsize_;
  float contour_tmax_;
  float contour_segmethod_;
  float hand_validated_;
  float seed_hsz_;
  float seed_t1_;
  float seed_t2_;
  float seed_segmethod_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_5fpackage_2eproto();
  friend void protobuf_AssignDesc_protobuf_5fpackage_2eproto();
  friend void protobuf_ShutdownFile_protobuf_5fpackage_2eproto();

  void InitAsDefaultInstance();
  static ProtobufInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProtobufDirectory : public ::google::protobuf::Message {
 public:
  ProtobufDirectory();
  virtual ~ProtobufDirectory();

  ProtobufDirectory(const ProtobufDirectory& from);

  inline ProtobufDirectory& operator=(const ProtobufDirectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtobufDirectory& default_instance();

  void Swap(ProtobufDirectory* other);

  // implements Message ----------------------------------------------

  ProtobufDirectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtobufDirectory& from);
  void MergeFrom(const ProtobufDirectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobuf_package.ProtobufInfo protobuf_info = 1;
  inline int protobuf_info_size() const;
  inline void clear_protobuf_info();
  static const int kProtobufInfoFieldNumber = 1;
  inline const ::protobuf_package::ProtobufInfo& protobuf_info(int index) const;
  inline ::protobuf_package::ProtobufInfo* mutable_protobuf_info(int index);
  inline ::protobuf_package::ProtobufInfo* add_protobuf_info();
  inline const ::google::protobuf::RepeatedPtrField< ::protobuf_package::ProtobufInfo >&
      protobuf_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::protobuf_package::ProtobufInfo >*
      mutable_protobuf_info();

  // repeated string userCellDescriptions = 2;
  inline int usercelldescriptions_size() const;
  inline void clear_usercelldescriptions();
  static const int kUserCellDescriptionsFieldNumber = 2;
  inline const ::std::string& usercelldescriptions(int index) const;
  inline ::std::string* mutable_usercelldescriptions(int index);
  inline void set_usercelldescriptions(int index, const ::std::string& value);
  inline void set_usercelldescriptions(int index, const char* value);
  inline void set_usercelldescriptions(int index, const char* value, size_t size);
  inline ::std::string* add_usercelldescriptions();
  inline void add_usercelldescriptions(const ::std::string& value);
  inline void add_usercelldescriptions(const char* value);
  inline void add_usercelldescriptions(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& usercelldescriptions() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_usercelldescriptions();

  // repeated string quantifiedPropertyNames = 3;
  inline int quantifiedpropertynames_size() const;
  inline void clear_quantifiedpropertynames();
  static const int kQuantifiedPropertyNamesFieldNumber = 3;
  inline const ::std::string& quantifiedpropertynames(int index) const;
  inline ::std::string* mutable_quantifiedpropertynames(int index);
  inline void set_quantifiedpropertynames(int index, const ::std::string& value);
  inline void set_quantifiedpropertynames(int index, const char* value);
  inline void set_quantifiedpropertynames(int index, const char* value, size_t size);
  inline ::std::string* add_quantifiedpropertynames();
  inline void add_quantifiedpropertynames(const ::std::string& value);
  inline void add_quantifiedpropertynames(const char* value);
  inline void add_quantifiedpropertynames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& quantifiedpropertynames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_quantifiedpropertynames();

  // optional float idx_max = 4 [default = 0];
  inline bool has_idx_max() const;
  inline void clear_idx_max();
  static const int kIdxMaxFieldNumber = 4;
  inline float idx_max() const;
  inline void set_idx_max(float value);

  // optional float image_dimy = 5;
  inline bool has_image_dimy() const;
  inline void clear_image_dimy();
  static const int kImageDimyFieldNumber = 5;
  inline float image_dimy() const;
  inline void set_image_dimy(float value);

  // optional float image_dimx = 6;
  inline bool has_image_dimx() const;
  inline void clear_image_dimx();
  static const int kImageDimxFieldNumber = 6;
  inline float image_dimx() const;
  inline void set_image_dimx(float value);

  // optional float image_dimz = 7;
  inline bool has_image_dimz() const;
  inline void clear_image_dimz();
  static const int kImageDimzFieldNumber = 7;
  inline float image_dimz() const;
  inline void set_image_dimz(float value);

  // optional float x_micron_calibration = 8;
  inline bool has_x_micron_calibration() const;
  inline void clear_x_micron_calibration();
  static const int kXMicronCalibrationFieldNumber = 8;
  inline float x_micron_calibration() const;
  inline void set_x_micron_calibration(float value);

  // optional float y_micron_calibration = 9;
  inline bool has_y_micron_calibration() const;
  inline void clear_y_micron_calibration();
  static const int kYMicronCalibrationFieldNumber = 9;
  inline float y_micron_calibration() const;
  inline void set_y_micron_calibration(float value);

  // optional float z_micron_calibration = 10;
  inline bool has_z_micron_calibration() const;
  inline void clear_z_micron_calibration();
  static const int kZMicronCalibrationFieldNumber = 10;
  inline float z_micron_calibration() const;
  inline void set_z_micron_calibration(float value);

  // @@protoc_insertion_point(class_scope:protobuf_package.ProtobufDirectory)
 private:
  inline void set_has_idx_max();
  inline void clear_has_idx_max();
  inline void set_has_image_dimy();
  inline void clear_has_image_dimy();
  inline void set_has_image_dimx();
  inline void clear_has_image_dimx();
  inline void set_has_image_dimz();
  inline void clear_has_image_dimz();
  inline void set_has_x_micron_calibration();
  inline void clear_has_x_micron_calibration();
  inline void set_has_y_micron_calibration();
  inline void clear_has_y_micron_calibration();
  inline void set_has_z_micron_calibration();
  inline void clear_has_z_micron_calibration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::protobuf_package::ProtobufInfo > protobuf_info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> usercelldescriptions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> quantifiedpropertynames_;
  float idx_max_;
  float image_dimy_;
  float image_dimx_;
  float image_dimz_;
  float x_micron_calibration_;
  float y_micron_calibration_;
  float z_micron_calibration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_5fpackage_2eproto();
  friend void protobuf_AssignDesc_protobuf_5fpackage_2eproto();
  friend void protobuf_ShutdownFile_protobuf_5fpackage_2eproto();

  void InitAsDefaultInstance();
  static ProtobufDirectory* default_instance_;
};
// ===================================================================


// ===================================================================

// ProtobufInfo

// repeated int32 image_fullseg_coords_y = 1 [packed = true];
inline int ProtobufInfo::image_fullseg_coords_y_size() const {
  return image_fullseg_coords_y_.size();
}
inline void ProtobufInfo::clear_image_fullseg_coords_y() {
  image_fullseg_coords_y_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_fullseg_coords_y(int index) const {
  return image_fullseg_coords_y_.Get(index);
}
inline void ProtobufInfo::set_image_fullseg_coords_y(int index, ::google::protobuf::int32 value) {
  image_fullseg_coords_y_.Set(index, value);
}
inline void ProtobufInfo::add_image_fullseg_coords_y(::google::protobuf::int32 value) {
  image_fullseg_coords_y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_fullseg_coords_y() const {
  return image_fullseg_coords_y_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_fullseg_coords_y() {
  return &image_fullseg_coords_y_;
}

// repeated int32 image_fullseg_coords_x = 2 [packed = true];
inline int ProtobufInfo::image_fullseg_coords_x_size() const {
  return image_fullseg_coords_x_.size();
}
inline void ProtobufInfo::clear_image_fullseg_coords_x() {
  image_fullseg_coords_x_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_fullseg_coords_x(int index) const {
  return image_fullseg_coords_x_.Get(index);
}
inline void ProtobufInfo::set_image_fullseg_coords_x(int index, ::google::protobuf::int32 value) {
  image_fullseg_coords_x_.Set(index, value);
}
inline void ProtobufInfo::add_image_fullseg_coords_x(::google::protobuf::int32 value) {
  image_fullseg_coords_x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_fullseg_coords_x() const {
  return image_fullseg_coords_x_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_fullseg_coords_x() {
  return &image_fullseg_coords_x_;
}

// repeated int32 image_fullseg_coords_z = 3 [packed = true];
inline int ProtobufInfo::image_fullseg_coords_z_size() const {
  return image_fullseg_coords_z_.size();
}
inline void ProtobufInfo::clear_image_fullseg_coords_z() {
  image_fullseg_coords_z_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_fullseg_coords_z(int index) const {
  return image_fullseg_coords_z_.Get(index);
}
inline void ProtobufInfo::set_image_fullseg_coords_z(int index, ::google::protobuf::int32 value) {
  image_fullseg_coords_z_.Set(index, value);
}
inline void ProtobufInfo::add_image_fullseg_coords_z(::google::protobuf::int32 value) {
  image_fullseg_coords_z_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_fullseg_coords_z() const {
  return image_fullseg_coords_z_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_fullseg_coords_z() {
  return &image_fullseg_coords_z_;
}

// repeated int32 image_perimseg_coords_y = 4 [packed = true];
inline int ProtobufInfo::image_perimseg_coords_y_size() const {
  return image_perimseg_coords_y_.size();
}
inline void ProtobufInfo::clear_image_perimseg_coords_y() {
  image_perimseg_coords_y_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_perimseg_coords_y(int index) const {
  return image_perimseg_coords_y_.Get(index);
}
inline void ProtobufInfo::set_image_perimseg_coords_y(int index, ::google::protobuf::int32 value) {
  image_perimseg_coords_y_.Set(index, value);
}
inline void ProtobufInfo::add_image_perimseg_coords_y(::google::protobuf::int32 value) {
  image_perimseg_coords_y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_perimseg_coords_y() const {
  return image_perimseg_coords_y_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_perimseg_coords_y() {
  return &image_perimseg_coords_y_;
}

// repeated int32 image_perimseg_coords_x = 5 [packed = true];
inline int ProtobufInfo::image_perimseg_coords_x_size() const {
  return image_perimseg_coords_x_.size();
}
inline void ProtobufInfo::clear_image_perimseg_coords_x() {
  image_perimseg_coords_x_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_perimseg_coords_x(int index) const {
  return image_perimseg_coords_x_.Get(index);
}
inline void ProtobufInfo::set_image_perimseg_coords_x(int index, ::google::protobuf::int32 value) {
  image_perimseg_coords_x_.Set(index, value);
}
inline void ProtobufInfo::add_image_perimseg_coords_x(::google::protobuf::int32 value) {
  image_perimseg_coords_x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_perimseg_coords_x() const {
  return image_perimseg_coords_x_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_perimseg_coords_x() {
  return &image_perimseg_coords_x_;
}

// repeated int32 image_perimseg_coords_z = 6 [packed = true];
inline int ProtobufInfo::image_perimseg_coords_z_size() const {
  return image_perimseg_coords_z_.size();
}
inline void ProtobufInfo::clear_image_perimseg_coords_z() {
  image_perimseg_coords_z_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_perimseg_coords_z(int index) const {
  return image_perimseg_coords_z_.Get(index);
}
inline void ProtobufInfo::set_image_perimseg_coords_z(int index, ::google::protobuf::int32 value) {
  image_perimseg_coords_z_.Set(index, value);
}
inline void ProtobufInfo::add_image_perimseg_coords_z(::google::protobuf::int32 value) {
  image_perimseg_coords_z_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_perimseg_coords_z() const {
  return image_perimseg_coords_z_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_perimseg_coords_z() {
  return &image_perimseg_coords_z_;
}

// repeated int32 image_userseg_coords_y = 7 [packed = true];
inline int ProtobufInfo::image_userseg_coords_y_size() const {
  return image_userseg_coords_y_.size();
}
inline void ProtobufInfo::clear_image_userseg_coords_y() {
  image_userseg_coords_y_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_userseg_coords_y(int index) const {
  return image_userseg_coords_y_.Get(index);
}
inline void ProtobufInfo::set_image_userseg_coords_y(int index, ::google::protobuf::int32 value) {
  image_userseg_coords_y_.Set(index, value);
}
inline void ProtobufInfo::add_image_userseg_coords_y(::google::protobuf::int32 value) {
  image_userseg_coords_y_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_userseg_coords_y() const {
  return image_userseg_coords_y_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_userseg_coords_y() {
  return &image_userseg_coords_y_;
}

// repeated int32 image_userseg_coords_x = 8 [packed = true];
inline int ProtobufInfo::image_userseg_coords_x_size() const {
  return image_userseg_coords_x_.size();
}
inline void ProtobufInfo::clear_image_userseg_coords_x() {
  image_userseg_coords_x_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_userseg_coords_x(int index) const {
  return image_userseg_coords_x_.Get(index);
}
inline void ProtobufInfo::set_image_userseg_coords_x(int index, ::google::protobuf::int32 value) {
  image_userseg_coords_x_.Set(index, value);
}
inline void ProtobufInfo::add_image_userseg_coords_x(::google::protobuf::int32 value) {
  image_userseg_coords_x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_userseg_coords_x() const {
  return image_userseg_coords_x_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_userseg_coords_x() {
  return &image_userseg_coords_x_;
}

// repeated int32 image_userseg_coords_z = 9 [packed = true];
inline int ProtobufInfo::image_userseg_coords_z_size() const {
  return image_userseg_coords_z_.size();
}
inline void ProtobufInfo::clear_image_userseg_coords_z() {
  image_userseg_coords_z_.Clear();
}
inline ::google::protobuf::int32 ProtobufInfo::image_userseg_coords_z(int index) const {
  return image_userseg_coords_z_.Get(index);
}
inline void ProtobufInfo::set_image_userseg_coords_z(int index, ::google::protobuf::int32 value) {
  image_userseg_coords_z_.Set(index, value);
}
inline void ProtobufInfo::add_image_userseg_coords_z(::google::protobuf::int32 value) {
  image_userseg_coords_z_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProtobufInfo::image_userseg_coords_z() const {
  return image_userseg_coords_z_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProtobufInfo::mutable_image_userseg_coords_z() {
  return &image_userseg_coords_z_;
}

// repeated float quantifiedProperties = 10;
inline int ProtobufInfo::quantifiedproperties_size() const {
  return quantifiedproperties_.size();
}
inline void ProtobufInfo::clear_quantifiedproperties() {
  quantifiedproperties_.Clear();
}
inline float ProtobufInfo::quantifiedproperties(int index) const {
  return quantifiedproperties_.Get(index);
}
inline void ProtobufInfo::set_quantifiedproperties(int index, float value) {
  quantifiedproperties_.Set(index, value);
}
inline void ProtobufInfo::add_quantifiedproperties(float value) {
  quantifiedproperties_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ProtobufInfo::quantifiedproperties() const {
  return quantifiedproperties_;
}
inline ::google::protobuf::RepeatedField< float >*
ProtobufInfo::mutable_quantifiedproperties() {
  return &quantifiedproperties_;
}

// repeated float userCellValue = 11;
inline int ProtobufInfo::usercellvalue_size() const {
  return usercellvalue_.size();
}
inline void ProtobufInfo::clear_usercellvalue() {
  usercellvalue_.Clear();
}
inline float ProtobufInfo::usercellvalue(int index) const {
  return usercellvalue_.Get(index);
}
inline void ProtobufInfo::set_usercellvalue(int index, float value) {
  usercellvalue_.Set(index, value);
}
inline void ProtobufInfo::add_usercellvalue(float value) {
  usercellvalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ProtobufInfo::usercellvalue() const {
  return usercellvalue_;
}
inline ::google::protobuf::RepeatedField< float >*
ProtobufInfo::mutable_usercellvalue() {
  return &usercellvalue_;
}

// repeated string userCellFormula = 12;
inline int ProtobufInfo::usercellformula_size() const {
  return usercellformula_.size();
}
inline void ProtobufInfo::clear_usercellformula() {
  usercellformula_.Clear();
}
inline const ::std::string& ProtobufInfo::usercellformula(int index) const {
  return usercellformula_.Get(index);
}
inline ::std::string* ProtobufInfo::mutable_usercellformula(int index) {
  return usercellformula_.Mutable(index);
}
inline void ProtobufInfo::set_usercellformula(int index, const ::std::string& value) {
  usercellformula_.Mutable(index)->assign(value);
}
inline void ProtobufInfo::set_usercellformula(int index, const char* value) {
  usercellformula_.Mutable(index)->assign(value);
}
inline void ProtobufInfo::set_usercellformula(int index, const char* value, size_t size) {
  usercellformula_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtobufInfo::add_usercellformula() {
  return usercellformula_.Add();
}
inline void ProtobufInfo::add_usercellformula(const ::std::string& value) {
  usercellformula_.Add()->assign(value);
}
inline void ProtobufInfo::add_usercellformula(const char* value) {
  usercellformula_.Add()->assign(value);
}
inline void ProtobufInfo::add_usercellformula(const char* value, size_t size) {
  usercellformula_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtobufInfo::usercellformula() const {
  return usercellformula_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtobufInfo::mutable_usercellformula() {
  return &usercellformula_;
}

// optional float idx = 13;
inline bool ProtobufInfo::has_idx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProtobufInfo::set_has_idx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProtobufInfo::clear_has_idx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProtobufInfo::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline float ProtobufInfo::idx() const {
  return idx_;
}
inline void ProtobufInfo::set_idx(float value) {
  set_has_idx();
  idx_ = value;
}

// optional float seed_y = 14;
inline bool ProtobufInfo::has_seed_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProtobufInfo::set_has_seed_y() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProtobufInfo::clear_has_seed_y() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProtobufInfo::clear_seed_y() {
  seed_y_ = 0;
  clear_has_seed_y();
}
inline float ProtobufInfo::seed_y() const {
  return seed_y_;
}
inline void ProtobufInfo::set_seed_y(float value) {
  set_has_seed_y();
  seed_y_ = value;
}

// optional float seed_x = 15;
inline bool ProtobufInfo::has_seed_x() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProtobufInfo::set_has_seed_x() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProtobufInfo::clear_has_seed_x() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProtobufInfo::clear_seed_x() {
  seed_x_ = 0;
  clear_has_seed_x();
}
inline float ProtobufInfo::seed_x() const {
  return seed_x_;
}
inline void ProtobufInfo::set_seed_x(float value) {
  set_has_seed_x();
  seed_x_ = value;
}

// optional float seed_z = 16;
inline bool ProtobufInfo::has_seed_z() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProtobufInfo::set_has_seed_z() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProtobufInfo::clear_has_seed_z() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProtobufInfo::clear_seed_z() {
  seed_z_ = 0;
  clear_has_seed_z();
}
inline float ProtobufInfo::seed_z() const {
  return seed_z_;
}
inline void ProtobufInfo::set_seed_z(float value) {
  set_has_seed_z();
  seed_z_ = value;
}

// optional float seed_manual = 17;
inline bool ProtobufInfo::has_seed_manual() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProtobufInfo::set_has_seed_manual() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProtobufInfo::clear_has_seed_manual() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProtobufInfo::clear_seed_manual() {
  seed_manual_ = 0;
  clear_has_seed_manual();
}
inline float ProtobufInfo::seed_manual() const {
  return seed_manual_;
}
inline void ProtobufInfo::set_seed_manual(float value) {
  set_has_seed_manual();
  seed_manual_ = value;
}

// optional float contour_AddRemoveMerge = 18;
inline bool ProtobufInfo::has_contour_addremovemerge() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ProtobufInfo::set_has_contour_addremovemerge() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ProtobufInfo::clear_has_contour_addremovemerge() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ProtobufInfo::clear_contour_addremovemerge() {
  contour_addremovemerge_ = 0;
  clear_has_contour_addremovemerge();
}
inline float ProtobufInfo::contour_addremovemerge() const {
  return contour_addremovemerge_;
}
inline void ProtobufInfo::set_contour_addremovemerge(float value) {
  set_has_contour_addremovemerge();
  contour_addremovemerge_ = value;
}

// optional float contour_MergeGroup = 19;
inline bool ProtobufInfo::has_contour_mergegroup() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ProtobufInfo::set_has_contour_mergegroup() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ProtobufInfo::clear_has_contour_mergegroup() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ProtobufInfo::clear_contour_mergegroup() {
  contour_mergegroup_ = 0;
  clear_has_contour_mergegroup();
}
inline float ProtobufInfo::contour_mergegroup() const {
  return contour_mergegroup_;
}
inline void ProtobufInfo::set_contour_mergegroup(float value) {
  set_has_contour_mergegroup();
  contour_mergegroup_ = value;
}

// optional float contour_WindowSize = 20;
inline bool ProtobufInfo::has_contour_windowsize() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProtobufInfo::set_has_contour_windowsize() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProtobufInfo::clear_has_contour_windowsize() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProtobufInfo::clear_contour_windowsize() {
  contour_windowsize_ = 0;
  clear_has_contour_windowsize();
}
inline float ProtobufInfo::contour_windowsize() const {
  return contour_windowsize_;
}
inline void ProtobufInfo::set_contour_windowsize(float value) {
  set_has_contour_windowsize();
  contour_windowsize_ = value;
}

// optional float contour_Tmax = 21;
inline bool ProtobufInfo::has_contour_tmax() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ProtobufInfo::set_has_contour_tmax() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ProtobufInfo::clear_has_contour_tmax() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ProtobufInfo::clear_contour_tmax() {
  contour_tmax_ = 0;
  clear_has_contour_tmax();
}
inline float ProtobufInfo::contour_tmax() const {
  return contour_tmax_;
}
inline void ProtobufInfo::set_contour_tmax(float value) {
  set_has_contour_tmax();
  contour_tmax_ = value;
}

// optional float contour_segmethod = 22;
inline bool ProtobufInfo::has_contour_segmethod() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ProtobufInfo::set_has_contour_segmethod() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ProtobufInfo::clear_has_contour_segmethod() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ProtobufInfo::clear_contour_segmethod() {
  contour_segmethod_ = 0;
  clear_has_contour_segmethod();
}
inline float ProtobufInfo::contour_segmethod() const {
  return contour_segmethod_;
}
inline void ProtobufInfo::set_contour_segmethod(float value) {
  set_has_contour_segmethod();
  contour_segmethod_ = value;
}

// optional float hand_validated = 23 [default = 1];
inline bool ProtobufInfo::has_hand_validated() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ProtobufInfo::set_has_hand_validated() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ProtobufInfo::clear_has_hand_validated() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ProtobufInfo::clear_hand_validated() {
  hand_validated_ = 1;
  clear_has_hand_validated();
}
inline float ProtobufInfo::hand_validated() const {
  return hand_validated_;
}
inline void ProtobufInfo::set_hand_validated(float value) {
  set_has_hand_validated();
  hand_validated_ = value;
}

// optional float seed_hsz = 24;
inline bool ProtobufInfo::has_seed_hsz() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ProtobufInfo::set_has_seed_hsz() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ProtobufInfo::clear_has_seed_hsz() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ProtobufInfo::clear_seed_hsz() {
  seed_hsz_ = 0;
  clear_has_seed_hsz();
}
inline float ProtobufInfo::seed_hsz() const {
  return seed_hsz_;
}
inline void ProtobufInfo::set_seed_hsz(float value) {
  set_has_seed_hsz();
  seed_hsz_ = value;
}

// optional float seed_t1 = 25;
inline bool ProtobufInfo::has_seed_t1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ProtobufInfo::set_has_seed_t1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ProtobufInfo::clear_has_seed_t1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ProtobufInfo::clear_seed_t1() {
  seed_t1_ = 0;
  clear_has_seed_t1();
}
inline float ProtobufInfo::seed_t1() const {
  return seed_t1_;
}
inline void ProtobufInfo::set_seed_t1(float value) {
  set_has_seed_t1();
  seed_t1_ = value;
}

// optional float seed_t2 = 26;
inline bool ProtobufInfo::has_seed_t2() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ProtobufInfo::set_has_seed_t2() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ProtobufInfo::clear_has_seed_t2() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ProtobufInfo::clear_seed_t2() {
  seed_t2_ = 0;
  clear_has_seed_t2();
}
inline float ProtobufInfo::seed_t2() const {
  return seed_t2_;
}
inline void ProtobufInfo::set_seed_t2(float value) {
  set_has_seed_t2();
  seed_t2_ = value;
}

// optional float seed_segmethod = 27;
inline bool ProtobufInfo::has_seed_segmethod() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ProtobufInfo::set_has_seed_segmethod() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ProtobufInfo::clear_has_seed_segmethod() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ProtobufInfo::clear_seed_segmethod() {
  seed_segmethod_ = 0;
  clear_has_seed_segmethod();
}
inline float ProtobufInfo::seed_segmethod() const {
  return seed_segmethod_;
}
inline void ProtobufInfo::set_seed_segmethod(float value) {
  set_has_seed_segmethod();
  seed_segmethod_ = value;
}

// -------------------------------------------------------------------

// ProtobufDirectory

// repeated .protobuf_package.ProtobufInfo protobuf_info = 1;
inline int ProtobufDirectory::protobuf_info_size() const {
  return protobuf_info_.size();
}
inline void ProtobufDirectory::clear_protobuf_info() {
  protobuf_info_.Clear();
}
inline const ::protobuf_package::ProtobufInfo& ProtobufDirectory::protobuf_info(int index) const {
  return protobuf_info_.Get(index);
}
inline ::protobuf_package::ProtobufInfo* ProtobufDirectory::mutable_protobuf_info(int index) {
  return protobuf_info_.Mutable(index);
}
inline ::protobuf_package::ProtobufInfo* ProtobufDirectory::add_protobuf_info() {
  return protobuf_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobuf_package::ProtobufInfo >&
ProtobufDirectory::protobuf_info() const {
  return protobuf_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::protobuf_package::ProtobufInfo >*
ProtobufDirectory::mutable_protobuf_info() {
  return &protobuf_info_;
}

// repeated string userCellDescriptions = 2;
inline int ProtobufDirectory::usercelldescriptions_size() const {
  return usercelldescriptions_.size();
}
inline void ProtobufDirectory::clear_usercelldescriptions() {
  usercelldescriptions_.Clear();
}
inline const ::std::string& ProtobufDirectory::usercelldescriptions(int index) const {
  return usercelldescriptions_.Get(index);
}
inline ::std::string* ProtobufDirectory::mutable_usercelldescriptions(int index) {
  return usercelldescriptions_.Mutable(index);
}
inline void ProtobufDirectory::set_usercelldescriptions(int index, const ::std::string& value) {
  usercelldescriptions_.Mutable(index)->assign(value);
}
inline void ProtobufDirectory::set_usercelldescriptions(int index, const char* value) {
  usercelldescriptions_.Mutable(index)->assign(value);
}
inline void ProtobufDirectory::set_usercelldescriptions(int index, const char* value, size_t size) {
  usercelldescriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtobufDirectory::add_usercelldescriptions() {
  return usercelldescriptions_.Add();
}
inline void ProtobufDirectory::add_usercelldescriptions(const ::std::string& value) {
  usercelldescriptions_.Add()->assign(value);
}
inline void ProtobufDirectory::add_usercelldescriptions(const char* value) {
  usercelldescriptions_.Add()->assign(value);
}
inline void ProtobufDirectory::add_usercelldescriptions(const char* value, size_t size) {
  usercelldescriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtobufDirectory::usercelldescriptions() const {
  return usercelldescriptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtobufDirectory::mutable_usercelldescriptions() {
  return &usercelldescriptions_;
}

// repeated string quantifiedPropertyNames = 3;
inline int ProtobufDirectory::quantifiedpropertynames_size() const {
  return quantifiedpropertynames_.size();
}
inline void ProtobufDirectory::clear_quantifiedpropertynames() {
  quantifiedpropertynames_.Clear();
}
inline const ::std::string& ProtobufDirectory::quantifiedpropertynames(int index) const {
  return quantifiedpropertynames_.Get(index);
}
inline ::std::string* ProtobufDirectory::mutable_quantifiedpropertynames(int index) {
  return quantifiedpropertynames_.Mutable(index);
}
inline void ProtobufDirectory::set_quantifiedpropertynames(int index, const ::std::string& value) {
  quantifiedpropertynames_.Mutable(index)->assign(value);
}
inline void ProtobufDirectory::set_quantifiedpropertynames(int index, const char* value) {
  quantifiedpropertynames_.Mutable(index)->assign(value);
}
inline void ProtobufDirectory::set_quantifiedpropertynames(int index, const char* value, size_t size) {
  quantifiedpropertynames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProtobufDirectory::add_quantifiedpropertynames() {
  return quantifiedpropertynames_.Add();
}
inline void ProtobufDirectory::add_quantifiedpropertynames(const ::std::string& value) {
  quantifiedpropertynames_.Add()->assign(value);
}
inline void ProtobufDirectory::add_quantifiedpropertynames(const char* value) {
  quantifiedpropertynames_.Add()->assign(value);
}
inline void ProtobufDirectory::add_quantifiedpropertynames(const char* value, size_t size) {
  quantifiedpropertynames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProtobufDirectory::quantifiedpropertynames() const {
  return quantifiedpropertynames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProtobufDirectory::mutable_quantifiedpropertynames() {
  return &quantifiedpropertynames_;
}

// optional float idx_max = 4 [default = 0];
inline bool ProtobufDirectory::has_idx_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProtobufDirectory::set_has_idx_max() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProtobufDirectory::clear_has_idx_max() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProtobufDirectory::clear_idx_max() {
  idx_max_ = 0;
  clear_has_idx_max();
}
inline float ProtobufDirectory::idx_max() const {
  return idx_max_;
}
inline void ProtobufDirectory::set_idx_max(float value) {
  set_has_idx_max();
  idx_max_ = value;
}

// optional float image_dimy = 5;
inline bool ProtobufDirectory::has_image_dimy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProtobufDirectory::set_has_image_dimy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProtobufDirectory::clear_has_image_dimy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProtobufDirectory::clear_image_dimy() {
  image_dimy_ = 0;
  clear_has_image_dimy();
}
inline float ProtobufDirectory::image_dimy() const {
  return image_dimy_;
}
inline void ProtobufDirectory::set_image_dimy(float value) {
  set_has_image_dimy();
  image_dimy_ = value;
}

// optional float image_dimx = 6;
inline bool ProtobufDirectory::has_image_dimx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProtobufDirectory::set_has_image_dimx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProtobufDirectory::clear_has_image_dimx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProtobufDirectory::clear_image_dimx() {
  image_dimx_ = 0;
  clear_has_image_dimx();
}
inline float ProtobufDirectory::image_dimx() const {
  return image_dimx_;
}
inline void ProtobufDirectory::set_image_dimx(float value) {
  set_has_image_dimx();
  image_dimx_ = value;
}

// optional float image_dimz = 7;
inline bool ProtobufDirectory::has_image_dimz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProtobufDirectory::set_has_image_dimz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProtobufDirectory::clear_has_image_dimz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProtobufDirectory::clear_image_dimz() {
  image_dimz_ = 0;
  clear_has_image_dimz();
}
inline float ProtobufDirectory::image_dimz() const {
  return image_dimz_;
}
inline void ProtobufDirectory::set_image_dimz(float value) {
  set_has_image_dimz();
  image_dimz_ = value;
}

// optional float x_micron_calibration = 8;
inline bool ProtobufDirectory::has_x_micron_calibration() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProtobufDirectory::set_has_x_micron_calibration() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProtobufDirectory::clear_has_x_micron_calibration() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProtobufDirectory::clear_x_micron_calibration() {
  x_micron_calibration_ = 0;
  clear_has_x_micron_calibration();
}
inline float ProtobufDirectory::x_micron_calibration() const {
  return x_micron_calibration_;
}
inline void ProtobufDirectory::set_x_micron_calibration(float value) {
  set_has_x_micron_calibration();
  x_micron_calibration_ = value;
}

// optional float y_micron_calibration = 9;
inline bool ProtobufDirectory::has_y_micron_calibration() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProtobufDirectory::set_has_y_micron_calibration() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProtobufDirectory::clear_has_y_micron_calibration() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProtobufDirectory::clear_y_micron_calibration() {
  y_micron_calibration_ = 0;
  clear_has_y_micron_calibration();
}
inline float ProtobufDirectory::y_micron_calibration() const {
  return y_micron_calibration_;
}
inline void ProtobufDirectory::set_y_micron_calibration(float value) {
  set_has_y_micron_calibration();
  y_micron_calibration_ = value;
}

// optional float z_micron_calibration = 10;
inline bool ProtobufDirectory::has_z_micron_calibration() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProtobufDirectory::set_has_z_micron_calibration() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProtobufDirectory::clear_has_z_micron_calibration() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProtobufDirectory::clear_z_micron_calibration() {
  z_micron_calibration_ = 0;
  clear_has_z_micron_calibration();
}
inline float ProtobufDirectory::z_micron_calibration() const {
  return z_micron_calibration_;
}
inline void ProtobufDirectory::set_z_micron_calibration(float value) {
  set_has_z_micron_calibration();
  z_micron_calibration_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf_package

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_5fpackage_2eproto__INCLUDED
#pragma clang diagnostic pop
